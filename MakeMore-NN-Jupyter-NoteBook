{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6edbd12b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:11.057649Z",
     "iopub.status.busy": "2024-05-23T02:56:11.056932Z",
     "iopub.status.idle": "2024-05-23T02:56:11.067686Z",
     "shell.execute_reply": "2024-05-23T02:56:11.066407Z"
    },
    "papermill": {
     "duration": 0.020315,
     "end_time": "2024-05-23T02:56:11.070407",
     "exception": false,
     "start_time": "2024-05-23T02:56:11.050092",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# The amount of chars we are reading to make prediction\n",
    "BLOCK_SIZE = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53a5ada7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:11.081787Z",
     "iopub.status.busy": "2024-05-23T02:56:11.081022Z",
     "iopub.status.idle": "2024-05-23T02:56:15.337200Z",
     "shell.execute_reply": "2024-05-23T02:56:15.336161Z"
    },
    "papermill": {
     "duration": 4.265124,
     "end_time": "2024-05-23T02:56:15.340303",
     "exception": false,
     "start_time": "2024-05-23T02:56:11.075179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn.functional as F\n",
    "import matplotlib.pyplot as plt # for making figures\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a476484",
   "metadata": {
    "papermill": {
     "duration": 0.004181,
     "end_time": "2024-05-23T02:56:15.349120",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.344939",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Getting Training Data Set Up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "920a3943",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.361524Z",
     "iopub.status.busy": "2024-05-23T02:56:15.360909Z",
     "iopub.status.idle": "2024-05-23T02:56:15.392880Z",
     "shell.execute_reply": "2024-05-23T02:56:15.391634Z"
    },
    "papermill": {
     "duration": 0.042551,
     "end_time": "2024-05-23T02:56:15.396599",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.354048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['abagael',\n",
       " 'abagail',\n",
       " 'abbe',\n",
       " 'abbey',\n",
       " 'abbi',\n",
       " 'abbie',\n",
       " 'abby',\n",
       " 'abigael',\n",
       " 'abigail',\n",
       " 'abigale']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting Train, Dev, and Test data from dataset\n",
    "\n",
    "\n",
    "# Loads data from dataset\n",
    "def load_data():\n",
    "    paths = ['/kaggle/input/names/names/female.txt',\n",
    "             '/kaggle/input/names/names/male.txt']\n",
    "    \n",
    "    names = []\n",
    "    \n",
    "    for path in paths:\n",
    "        with open(path, \"r\") as f:\n",
    "            names += [line.rstrip('\\n').replace(\"-\", \"\").replace(\"'\", \"\").replace(\" \", \"\").lower() for line in f]\n",
    "            \n",
    "    return names\n",
    "\n",
    "name_data = load_data()\n",
    "name_data[:10]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "26531baa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.408265Z",
     "iopub.status.busy": "2024-05-23T02:56:15.407834Z",
     "iopub.status.idle": "2024-05-23T02:56:15.418727Z",
     "shell.execute_reply": "2024-05-23T02:56:15.417337Z"
    },
    "papermill": {
     "duration": 0.019575,
     "end_time": "2024-05-23T02:56:15.421249",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.401674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': 1,\n",
       " 'b': 2,\n",
       " 'c': 3,\n",
       " 'd': 4,\n",
       " 'e': 5,\n",
       " 'f': 6,\n",
       " 'g': 7,\n",
       " 'h': 8,\n",
       " 'i': 9,\n",
       " 'j': 10,\n",
       " 'k': 11,\n",
       " 'l': 12,\n",
       " 'm': 13,\n",
       " 'n': 14,\n",
       " 'o': 15,\n",
       " 'p': 16,\n",
       " 'q': 17,\n",
       " 'r': 18,\n",
       " 's': 19,\n",
       " 't': 20,\n",
       " 'u': 21,\n",
       " 'v': 22,\n",
       " 'w': 23,\n",
       " 'x': 24,\n",
       " 'y': 25,\n",
       " 'z': 26,\n",
       " '.': 0}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting string to integer and integer to string mappings\n",
    "chars = sorted(list(set(''.join(name_data))))\n",
    "stoi = {s:i+1 for i,s in enumerate(chars)}\n",
    "stoi['.'] = 0\n",
    "itos = {i:s for s,i in stoi.items()}\n",
    "\n",
    "stoi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b26022e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.433206Z",
     "iopub.status.busy": "2024-05-23T02:56:15.432578Z",
     "iopub.status.idle": "2024-05-23T02:56:15.677760Z",
     "shell.execute_reply": "2024-05-23T02:56:15.675740Z"
    },
    "papermill": {
     "duration": 0.254502,
     "end_time": "2024-05-23T02:56:15.680704",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.426202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([44674, 3]) torch.Size([44674])\n",
      "torch.Size([5494, 3]) torch.Size([5494])\n",
      "torch.Size([5661, 3]) torch.Size([5661])\n"
     ]
    }
   ],
   "source": [
    "# Builds a dataset in format\n",
    "def build_dataset(words):  \n",
    "    X, Y = [], []\n",
    "    for w in words:\n",
    "        context = [0] * BLOCK_SIZE\n",
    "        for ch in w + '.':\n",
    "            ix = stoi[ch]\n",
    "            X.append(context)\n",
    "            Y.append(ix)\n",
    "            context = context[1:] + [ix] # crop and append\n",
    "\n",
    "    X = torch.tensor(X)\n",
    "    Y = torch.tensor(Y)\n",
    "    print(X.shape, Y.shape)\n",
    "    return X, Y\n",
    "\n",
    "\n",
    "import random\n",
    "random.seed(42)\n",
    "random.shuffle(name_data)\n",
    "\n",
    "n1 = int(0.8*len(name_data))\n",
    "n2 = int(0.9*len(name_data))\n",
    "\n",
    "# Spliting training data\n",
    "x_train, y_train = build_dataset(name_data[:n1])\n",
    "x_dev, y_dev = build_dataset(name_data[n1:n2])\n",
    "x_test, y_test = build_dataset(name_data[n2:])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79dd2c5e",
   "metadata": {
    "papermill": {
     "duration": 0.005339,
     "end_time": "2024-05-23T02:56:15.692971",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.687632",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# The Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b2e792df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.705191Z",
     "iopub.status.busy": "2024-05-23T02:56:15.704491Z",
     "iopub.status.idle": "2024-05-23T02:56:15.710897Z",
     "shell.execute_reply": "2024-05-23T02:56:15.709932Z"
    },
    "papermill": {
     "duration": 0.014859,
     "end_time": "2024-05-23T02:56:15.713036",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.698177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([44674, 3]), torch.Size([44674]))"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape, y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ca1d5cb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.724935Z",
     "iopub.status.busy": "2024-05-23T02:56:15.724246Z",
     "iopub.status.idle": "2024-05-23T02:56:15.728754Z",
     "shell.execute_reply": "2024-05-23T02:56:15.727810Z"
    },
    "papermill": {
     "duration": 0.013063,
     "end_time": "2024-05-23T02:56:15.730999",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.717936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "g = torch.Generator().manual_seed(2147483647)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6b622df8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.743318Z",
     "iopub.status.busy": "2024-05-23T02:56:15.742623Z",
     "iopub.status.idle": "2024-05-23T02:56:15.760379Z",
     "shell.execute_reply": "2024-05-23T02:56:15.759124Z"
    },
    "papermill": {
     "duration": 0.027005,
     "end_time": "2024-05-23T02:56:15.763120",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.736115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "C = torch.randn((27, 10), generator=g)\n",
    "W1 = torch.randn((30, 150), generator=g)\n",
    "b1 = torch.randn(150, generator=g)\n",
    "W2 = torch.randn((150, 27), generator=g)\n",
    "b2 = torch.randn(27, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]\n",
    "\n",
    "# Making sure they know to be differentiable\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9eec7fd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.775053Z",
     "iopub.status.busy": "2024-05-23T02:56:15.774376Z",
     "iopub.status.idle": "2024-05-23T02:56:15.782873Z",
     "shell.execute_reply": "2024-05-23T02:56:15.781928Z"
    },
    "papermill": {
     "duration": 0.017302,
     "end_time": "2024-05-23T02:56:15.785404",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.768102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8997"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(p.nelement() for p in parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a28a40aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.797790Z",
     "iopub.status.busy": "2024-05-23T02:56:15.796819Z",
     "iopub.status.idle": "2024-05-23T02:56:15.801159Z",
     "shell.execute_reply": "2024-05-23T02:56:15.800384Z"
    },
    "papermill": {
     "duration": 0.012646,
     "end_time": "2024-05-23T02:56:15.803253",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.790607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lri = []\n",
    "lossi = []\n",
    "stepi = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "29d3d0bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:56:15.815485Z",
     "iopub.status.busy": "2024-05-23T02:56:15.815044Z",
     "iopub.status.idle": "2024-05-23T02:58:00.907766Z",
     "shell.execute_reply": "2024-05-23T02:58:00.906447Z"
    },
    "papermill": {
     "duration": 105.102444,
     "end_time": "2024-05-23T02:58:00.910756",
     "exception": false,
     "start_time": "2024-05-23T02:56:15.808312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Main training loop\n",
    "\n",
    "for i in range(200000):\n",
    "    # minibatch construct\n",
    "    ix = torch.randint(0, x_train.shape[0], (32,))\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[x_train[ix]] # (32, 3, 10)\n",
    "    h = torch.tanh(emb.view(-1, 30) @ W1 + b1)\n",
    "    logits = h @ W2 + b2\n",
    "    \n",
    "    loss = F.cross_entropy(logits, y_train[ix])\n",
    "\n",
    "\n",
    "    # Reseting gradient of values\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    # Calculating the derivative\n",
    "    loss.backward()\n",
    "\n",
    "    # Optimizer to nudge our values closer to wanted\n",
    "    lr = 0.1 if i < 100000 else 0.01\n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "\n",
    "    # Plotting data onto our trackers \n",
    "    stepi.append(i)\n",
    "    lossi.append(loss.log10().item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dc437efa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:58:00.923037Z",
     "iopub.status.busy": "2024-05-23T02:58:00.922602Z",
     "iopub.status.idle": "2024-05-23T02:58:01.544001Z",
     "shell.execute_reply": "2024-05-23T02:58:01.542896Z"
    },
    "papermill": {
     "duration": 0.630688,
     "end_time": "2024-05-23T02:58:01.546666",
     "exception": false,
     "start_time": "2024-05-23T02:58:00.915978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7a963c5a08e0>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(stepi, lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e546d8c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:58:01.560532Z",
     "iopub.status.busy": "2024-05-23T02:58:01.559602Z",
     "iopub.status.idle": "2024-05-23T02:58:01.664443Z",
     "shell.execute_reply": "2024-05-23T02:58:01.663100Z"
    },
    "papermill": {
     "duration": 0.114752,
     "end_time": "2024-05-23T02:58:01.666963",
     "exception": false,
     "start_time": "2024-05-23T02:58:01.552211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(1.8805, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating loss\n",
    "emb = C[x_train] # (32, 3, 2)\n",
    "h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 100)\n",
    "logits = h @ W2 + b2 # (32, 27)\n",
    "loss = F.cross_entropy(logits, y_train)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9560946c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T02:58:01.680278Z",
     "iopub.status.busy": "2024-05-23T02:58:01.679880Z",
     "iopub.status.idle": "2024-05-23T02:58:01.694891Z",
     "shell.execute_reply": "2024-05-23T02:58:01.693564Z"
    },
    "papermill": {
     "duration": 0.024727,
     "end_time": "2024-05-23T02:58:01.697496",
     "exception": false,
     "start_time": "2024-05-23T02:58:01.672769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(2.1216, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Testing network on dev examples\n",
    "emb = C[x_dev] # (32, 3, 2)\n",
    "h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 100)\n",
    "logits = h @ W2 + b2 # (32, 27)\n",
    "loss = F.cross_entropy(logits, y_dev)\n",
    "loss"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1975,
     "sourceId": 3392,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 114.703968,
   "end_time": "2024-05-23T02:58:02.628559",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-23T02:56:07.924591",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
