{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8f8eec40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:13.318403Z",
     "iopub.status.busy": "2024-05-23T04:03:13.317975Z",
     "iopub.status.idle": "2024-05-23T04:03:13.331198Z",
     "shell.execute_reply": "2024-05-23T04:03:13.330054Z"
    },
    "papermill": {
     "duration": 0.024549,
     "end_time": "2024-05-23T04:03:13.333714",
     "exception": false,
     "start_time": "2024-05-23T04:03:13.309165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# The amount of chars we are reading to make prediction\n",
    "BLOCK_SIZE = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "657ae446",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:13.349015Z",
     "iopub.status.busy": "2024-05-23T04:03:13.348598Z",
     "iopub.status.idle": "2024-05-23T04:03:17.206199Z",
     "shell.execute_reply": "2024-05-23T04:03:17.205008Z"
    },
    "papermill": {
     "duration": 3.868283,
     "end_time": "2024-05-23T04:03:17.209047",
     "exception": false,
     "start_time": "2024-05-23T04:03:13.340764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn.functional as F\n",
    "import matplotlib.pyplot as plt # for making figures\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4515e613",
   "metadata": {
    "papermill": {
     "duration": 0.006406,
     "end_time": "2024-05-23T04:03:17.222189",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.215783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Getting Training Data Set Up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6bdb11ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:17.237776Z",
     "iopub.status.busy": "2024-05-23T04:03:17.237241Z",
     "iopub.status.idle": "2024-05-23T04:03:17.271495Z",
     "shell.execute_reply": "2024-05-23T04:03:17.270483Z"
    },
    "papermill": {
     "duration": 0.045241,
     "end_time": "2024-05-23T04:03:17.274018",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.228777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['abagael',\n",
       " 'abagail',\n",
       " 'abbe',\n",
       " 'abbey',\n",
       " 'abbi',\n",
       " 'abbie',\n",
       " 'abby',\n",
       " 'abigael',\n",
       " 'abigail',\n",
       " 'abigale']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting Train, Dev, and Test data from dataset\n",
    "\n",
    "\n",
    "# Loads data from dataset\n",
    "def load_data():\n",
    "    paths = ['/kaggle/input/names/names/female.txt',\n",
    "             '/kaggle/input/names/names/male.txt']\n",
    "    \n",
    "    names = []\n",
    "    \n",
    "    for path in paths:\n",
    "        with open(path, \"r\") as f:\n",
    "            names += [line.rstrip('\\n').replace(\"-\", \"\").replace(\"'\", \"\").replace(\" \", \"\").lower() for line in f]\n",
    "            \n",
    "    return names\n",
    "\n",
    "name_data = load_data()\n",
    "name_data[:10]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0ddc6752",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:17.290476Z",
     "iopub.status.busy": "2024-05-23T04:03:17.289649Z",
     "iopub.status.idle": "2024-05-23T04:03:17.297154Z",
     "shell.execute_reply": "2024-05-23T04:03:17.296108Z"
    },
    "papermill": {
     "duration": 0.018599,
     "end_time": "2024-05-23T04:03:17.299643",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.281044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Getting string to integer and integer to string mappings\n",
    "chars = sorted(list(set(''.join(name_data))))\n",
    "stoi = {s:i+1 for i,s in enumerate(chars)}\n",
    "stoi['.'] = 0\n",
    "itos = {i:s for s,i in stoi.items()}\n",
    "\n",
    "#stoi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cf085cf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:17.315821Z",
     "iopub.status.busy": "2024-05-23T04:03:17.315098Z",
     "iopub.status.idle": "2024-05-23T04:03:17.623891Z",
     "shell.execute_reply": "2024-05-23T04:03:17.622284Z"
    },
    "papermill": {
     "duration": 0.320087,
     "end_time": "2024-05-23T04:03:17.626588",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.306501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([44674, 3]) torch.Size([44674])\n",
      "torch.Size([5494, 3]) torch.Size([5494])\n",
      "torch.Size([5661, 3]) torch.Size([5661])\n"
     ]
    }
   ],
   "source": [
    "# Builds a dataset in format\n",
    "def build_dataset(words):  \n",
    "    X, Y = [], []\n",
    "    for w in words:\n",
    "        context = [0] * BLOCK_SIZE\n",
    "        for ch in w + '.':\n",
    "            ix = stoi[ch]\n",
    "            X.append(context)\n",
    "            Y.append(ix)\n",
    "            context = context[1:] + [ix] # crop and append\n",
    "\n",
    "    X = torch.tensor(X)\n",
    "    Y = torch.tensor(Y)\n",
    "    print(X.shape, Y.shape)\n",
    "    return X, Y\n",
    "\n",
    "\n",
    "import random\n",
    "random.seed(42)\n",
    "random.shuffle(name_data)\n",
    "\n",
    "n1 = int(0.8*len(name_data))\n",
    "n2 = int(0.9*len(name_data))\n",
    "\n",
    "# Spliting training data\n",
    "x_train, y_train = build_dataset(name_data[:n1])\n",
    "x_dev, y_dev = build_dataset(name_data[n1:n2])\n",
    "x_test, y_test = build_dataset(name_data[n2:])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf3e2810",
   "metadata": {
    "papermill": {
     "duration": 0.006607,
     "end_time": "2024-05-23T04:03:17.640294",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.633687",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# The Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ab88cb49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:17.656539Z",
     "iopub.status.busy": "2024-05-23T04:03:17.655281Z",
     "iopub.status.idle": "2024-05-23T04:03:17.663195Z",
     "shell.execute_reply": "2024-05-23T04:03:17.662080Z"
    },
    "papermill": {
     "duration": 0.018414,
     "end_time": "2024-05-23T04:03:17.665555",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.647141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([44674, 3]), torch.Size([44674]))"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape, y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "267bc587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:17.682510Z",
     "iopub.status.busy": "2024-05-23T04:03:17.681687Z",
     "iopub.status.idle": "2024-05-23T04:03:17.687551Z",
     "shell.execute_reply": "2024-05-23T04:03:17.686263Z"
    },
    "papermill": {
     "duration": 0.017268,
     "end_time": "2024-05-23T04:03:17.690470",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.673202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "g = torch.Generator().manual_seed(2147483647)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "27dbece3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:17.707217Z",
     "iopub.status.busy": "2024-05-23T04:03:17.706824Z",
     "iopub.status.idle": "2024-05-23T04:03:17.758851Z",
     "shell.execute_reply": "2024-05-23T04:03:17.757678Z"
    },
    "papermill": {
     "duration": 0.063758,
     "end_time": "2024-05-23T04:03:17.761784",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.698026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "n_embd = 10\n",
    "n_hidden = 200\n",
    "\n",
    "C = torch.randn((27, 10), generator=g)\n",
    "W1 = torch.randn((n_embd * BLOCK_SIZE, n_hidden), generator=g) * (5/3) / ((n_embd * BLOCK_SIZE) ** 0.5)\n",
    "b1 = torch.randn(n_hidden, generator=g)* 0.01\n",
    "W2 = torch.randn((n_hidden, 27), generator=g) * 0.01\n",
    "b2 = torch.randn(27, generator=g) * 0.0\n",
    "\n",
    "bngain = torch.ones((1, n_hidden))\n",
    "bnbias = torch.zeros((1, n_hidden))\n",
    "                    \n",
    "parameters = [C, W1, b1, W2, b2, bngain, bnbias]\n",
    "\n",
    "# Making sure they know to be differentiable\n",
    "for p in parameters:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e3de6770",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:17.778820Z",
     "iopub.status.busy": "2024-05-23T04:03:17.777877Z",
     "iopub.status.idle": "2024-05-23T04:03:17.785726Z",
     "shell.execute_reply": "2024-05-23T04:03:17.784516Z"
    },
    "papermill": {
     "duration": 0.0188,
     "end_time": "2024-05-23T04:03:17.788155",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.769355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12297"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(p.nelement() for p in parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "515a2570",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T03:38:06.125083Z",
     "iopub.status.busy": "2024-05-23T03:38:06.124447Z",
     "iopub.status.idle": "2024-05-23T03:38:06.131854Z",
     "shell.execute_reply": "2024-05-23T03:38:06.130151Z",
     "shell.execute_reply.started": "2024-05-23T03:38:06.125029Z"
    },
    "papermill": {
     "duration": 0.007346,
     "end_time": "2024-05-23T04:03:17.802688",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.795342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "150362ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:17.820876Z",
     "iopub.status.busy": "2024-05-23T04:03:17.820435Z",
     "iopub.status.idle": "2024-05-23T04:03:38.988362Z",
     "shell.execute_reply": "2024-05-23T04:03:38.986848Z"
    },
    "papermill": {
     "duration": 21.179964,
     "end_time": "2024-05-23T04:03:38.991436",
     "exception": false,
     "start_time": "2024-05-23T04:03:17.811472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "iters = 20000\n",
    "lossi = []\n",
    "stepi = []\n",
    "\n",
    "# Main training loop\n",
    "\n",
    "for i in range(iters):\n",
    "    # minibatch construct\n",
    "    ix = torch.randint(0, x_train.shape[0], (32,))\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[x_train[ix]] # (32, 3, 10)\n",
    "    hpreact = emb.view(-1, 30) @ W1 + b1\n",
    "    hpreact = bngain * (hpreact - hpreact.mean(0, keepdim=True)) / hpreact.std(0, keepdim=True) + bnbias\n",
    "    h = torch.tanh(hpreact)\n",
    "    logits = h @ W2 + b2\n",
    "    \n",
    "    loss = F.cross_entropy(logits, y_train[ix])\n",
    "\n",
    "\n",
    "    # Reseting gradient of values\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    # Calculating the derivative\n",
    "    loss.backward()\n",
    "\n",
    "    # Optimizer to nudge our values closer to wanted\n",
    "    lr = 0.1 if i < 100000 else 0.01\n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "\n",
    "    # Plotting data onto our trackers \n",
    "    stepi.append(i)\n",
    "    lossi.append(loss.log10().item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "049a3904",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:39.008657Z",
     "iopub.status.busy": "2024-05-23T04:03:39.007589Z",
     "iopub.status.idle": "2024-05-23T04:03:39.680178Z",
     "shell.execute_reply": "2024-05-23T04:03:39.679013Z"
    },
    "papermill": {
     "duration": 0.683845,
     "end_time": "2024-05-23T04:03:39.682868",
     "exception": false,
     "start_time": "2024-05-23T04:03:38.999023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7d6bbc1e4a90>]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(stepi, lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "481a0607",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:39.701930Z",
     "iopub.status.busy": "2024-05-23T04:03:39.701293Z",
     "iopub.status.idle": "2024-05-23T04:03:39.956446Z",
     "shell.execute_reply": "2024-05-23T04:03:39.955233Z"
    },
    "papermill": {
     "duration": 0.268073,
     "end_time": "2024-05-23T04:03:39.959120",
     "exception": false,
     "start_time": "2024-05-23T04:03:39.691047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(2.0199, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating loss\n",
    "emb = C[x_train] # (32, 3, 2)\n",
    "hpreact = emb.view(-1, 30) @ W1 + b1\n",
    "hpreact = bngain * (hpreact - hpreact.mean(0, keepdim=True)) / hpreact.std(0, keepdim=True) + bnbias\n",
    "h = torch.tanh(hpreact)\n",
    "logits = h @ W2 + b2 # (32, 27)\n",
    "loss = F.cross_entropy(logits, y_train)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f22bff60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:39.977930Z",
     "iopub.status.busy": "2024-05-23T04:03:39.977210Z",
     "iopub.status.idle": "2024-05-23T04:03:40.012493Z",
     "shell.execute_reply": "2024-05-23T04:03:40.011355Z"
    },
    "papermill": {
     "duration": 0.047493,
     "end_time": "2024-05-23T04:03:40.015011",
     "exception": false,
     "start_time": "2024-05-23T04:03:39.967518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(2.1412, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Testing network on dev examples\n",
    "emb = C[x_dev] # (32, 3, 2)\n",
    "hpreact = emb.view(-1, 30) @ W1 + b1\n",
    "hpreact = bngain * (hpreact - hpreact.mean(0, keepdim=True)) / hpreact.std(0, keepdim=True) + bnbias\n",
    "h = torch.tanh(hpreact)\n",
    "logits = h @ W2 + b2 # (32, 27)\n",
    "loss = F.cross_entropy(logits, y_dev)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eb474f85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:40.033053Z",
     "iopub.status.busy": "2024-05-23T04:03:40.032631Z",
     "iopub.status.idle": "2024-05-23T04:03:40.468006Z",
     "shell.execute_reply": "2024-05-23T04:03:40.466766Z"
    },
    "papermill": {
     "duration": 0.447532,
     "end_time": "2024-05-23T04:03:40.470668",
     "exception": false,
     "start_time": "2024-05-23T04:03:40.023136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualize dimensions 0 and 1 of the embedding matrix C for all characters\n",
    "plt.figure(figsize=(8,8))\n",
    "plt.scatter(C[:,0].data, C[:,1].data, s=200)\n",
    "for i in range(C.shape[0]):\n",
    "    plt.text(C[i,0].item(), C[i,1].item(), itos[i], ha=\"center\", va=\"center\", color='white')\n",
    "plt.grid('minor')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ce0a861d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T04:03:40.490192Z",
     "iopub.status.busy": "2024-05-23T04:03:40.489750Z",
     "iopub.status.idle": "2024-05-23T04:03:40.555421Z",
     "shell.execute_reply": "2024-05-23T04:03:40.553868Z"
    },
    "papermill": {
     "duration": 0.07854,
     "end_time": "2024-05-23T04:03:40.558256",
     "exception": false,
     "start_time": "2024-05-23T04:03:40.479716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bridgimyadleeb.\n",
      "ved.\n",
      "florgunthrugbngrlden.\n",
      "debedrtlingllgsren.\n",
      "beggstangelrnellestrvfrann.\n",
      "shubbrgdhirnest.\n",
      "jucrwinnquxgbendrcubbengdrryy.\n",
      "dlfferg.\n",
      "glessisklldrihelberlynn.\n",
      "juch.\n",
      "jelvernen.\n",
      "trbbnevevonnenghebrffndolomangprick.\n",
      "fluch.\n",
      "bennnerlvingquin.\n",
      "gvrtewhill.\n",
      "xlttanth.\n",
      "jengodda.\n",
      "blingfeddristrud.\n",
      "mellrketten.\n",
      "glxanntudke.\n"
     ]
    }
   ],
   "source": [
    "# sample from the model\n",
    "g = torch.Generator().manual_seed(2147483647 + 10)\n",
    "\n",
    "for _ in range(20):\n",
    "    \n",
    "    out = []\n",
    "    context = [0] * BLOCK_SIZE # initialize with all ...\n",
    "    while True:\n",
    "        emb = C[torch.tensor([context])] # (1,block_size,d)\n",
    "        h = torch.tanh(emb.view(1, -1) @ W1 + b1)\n",
    "        logits = h @ W2 + b2\n",
    "        probs = F.softmax(logits, dim=1)\n",
    "        ix = torch.multinomial(probs, num_samples=1, generator=g).item()\n",
    "        context = context[1:] + [ix]\n",
    "        out.append(ix)\n",
    "        if ix == 0:\n",
    "            break\n",
    "    \n",
    "    print(''.join(itos[i] for i in out))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1975,
     "sourceId": 3392,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 31.344339,
   "end_time": "2024-05-23T04:03:41.491524",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-23T04:03:10.147185",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
